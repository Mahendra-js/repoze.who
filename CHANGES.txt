Unreleased

 - Allow a downstream application to reset the identity during egress
   (e.g. if a user changes his username or password and the
   application would rather not require that the he logs out and logs
   back in for the change to "take").  The application should set a
   key in the WSGI environment: 'repoze.pam.identity_reset', which
   should have a value that is an identity dictionary that can be
   consumed by the "remember" method of the identifier that was used
   for the current request.

 - Add 'repoze.pam.identifier' to environment on ingress, which will
   be the identifier plugin instance which gave PAM the identity that
   became REMOTE_USER (to support introspection by the application, so
   it has a shot at knowing the identity format before it sets the
   value of 'repoze.pam.identity_reset' ).

 - Allow "remote user key" (default: REMOTE_USER) to be overridden
   (pass in remote_user_key to middleware constructor).

 - Allow form plugin to override the default form.

 - Add (cookie) "auth_tkt" identification plugin.

 - Stamp identity dictionaries with a userid by placing a key named
   'repoze.pam.userid' into the identity for each authenticated
   identity.

 - If an identity plugin inserts a 'repoze.pam.userid' key into the
   identity dictionary, consider this identity "preauthenticated".  No
   authenticator plugins will be asked to authenticate this identity.
   This is designed for things like domain authentication (and the
   recently added auth_tkt plugin).  Preauthenticated identities will
   be selected first when deciding which identity to use for any given
   request.

 - Insert a 'repoze.pam.identity' key into the WSGI environment on
   ingress if an identity is found.  Its value will be the identity
   dictionary related to the identity selected by repoze.pam on
   ingress.  Downstream consumers are allowed to mutate this
   dictionary; this value is passed to "remember" and "forget", so its
   main use is to do a "credentials reset"; e.g. a user has changed
   his username or password within the application, but we don't want
   to force him to log in again after he does so.

0.4 (03-07-2008)

 - Allow plugins to specify a classifiers list per interface (instead
   of a single classifiers list per plugin).

0.3 (03-05-2008)

  - Make SQLAuthenticatorPlugin's default_password_compare use
    hexdigest sha instead of base64'ed binary sha for simpler
    conversion.

0.2 (03-04-2008)

  - Added SQLAuthenticatorPlugin (see plugins/sql.py).

0.1 (02-27-2008)

  Initial release (no configuration file support yet).

